/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DriversDriverImport } from './routes/drivers/driver'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const TripsIndexLazyImport = createFileRoute('/trips/')()
const EarningsIndexLazyImport = createFileRoute('/earnings/')()
const TripsTripLazyImport = createFileRoute('/trips/$trip')()
const StaticsEarningsLazyImport = createFileRoute('/statics/earnings')()
const MiscSettingsLazyImport = createFileRoute('/misc/settings')()
const MiscProfileLazyImport = createFileRoute('/misc/profile')()
const DriversListLazyImport = createFileRoute('/drivers/list')()
const DriversByLocationLazyImport = createFileRoute('/drivers/by-location')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const TripsIndexLazyRoute = TripsIndexLazyImport.update({
  id: '/trips/',
  path: '/trips/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/trips/index.lazy').then((d) => d.Route))

const EarningsIndexLazyRoute = EarningsIndexLazyImport.update({
  id: '/earnings/',
  path: '/earnings/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/earnings/index.lazy').then((d) => d.Route),
)

const TripsTripLazyRoute = TripsTripLazyImport.update({
  id: '/trips/$trip',
  path: '/trips/$trip',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/trips/$trip.lazy').then((d) => d.Route))

const StaticsEarningsLazyRoute = StaticsEarningsLazyImport.update({
  id: '/statics/earnings',
  path: '/statics/earnings',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/statics/earnings.lazy').then((d) => d.Route),
)

const MiscSettingsLazyRoute = MiscSettingsLazyImport.update({
  id: '/misc/settings',
  path: '/misc/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/misc/settings.lazy').then((d) => d.Route))

const MiscProfileLazyRoute = MiscProfileLazyImport.update({
  id: '/misc/profile',
  path: '/misc/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/misc/profile.lazy').then((d) => d.Route))

const DriversListLazyRoute = DriversListLazyImport.update({
  id: '/drivers/list',
  path: '/drivers/list',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/drivers/list.lazy').then((d) => d.Route))

const DriversByLocationLazyRoute = DriversByLocationLazyImport.update({
  id: '/drivers/by-location',
  path: '/drivers/by-location',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/drivers/by-location.lazy').then((d) => d.Route),
)

const DriversDriverRoute = DriversDriverImport.update({
  id: '/drivers/driver',
  path: '/drivers/driver',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/drivers/driver': {
      id: '/drivers/driver'
      path: '/drivers/driver'
      fullPath: '/drivers/driver'
      preLoaderRoute: typeof DriversDriverImport
      parentRoute: typeof rootRoute
    }
    '/drivers/by-location': {
      id: '/drivers/by-location'
      path: '/drivers/by-location'
      fullPath: '/drivers/by-location'
      preLoaderRoute: typeof DriversByLocationLazyImport
      parentRoute: typeof rootRoute
    }
    '/drivers/list': {
      id: '/drivers/list'
      path: '/drivers/list'
      fullPath: '/drivers/list'
      preLoaderRoute: typeof DriversListLazyImport
      parentRoute: typeof rootRoute
    }
    '/misc/profile': {
      id: '/misc/profile'
      path: '/misc/profile'
      fullPath: '/misc/profile'
      preLoaderRoute: typeof MiscProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/misc/settings': {
      id: '/misc/settings'
      path: '/misc/settings'
      fullPath: '/misc/settings'
      preLoaderRoute: typeof MiscSettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/statics/earnings': {
      id: '/statics/earnings'
      path: '/statics/earnings'
      fullPath: '/statics/earnings'
      preLoaderRoute: typeof StaticsEarningsLazyImport
      parentRoute: typeof rootRoute
    }
    '/trips/$trip': {
      id: '/trips/$trip'
      path: '/trips/$trip'
      fullPath: '/trips/$trip'
      preLoaderRoute: typeof TripsTripLazyImport
      parentRoute: typeof rootRoute
    }
    '/earnings/': {
      id: '/earnings/'
      path: '/earnings'
      fullPath: '/earnings'
      preLoaderRoute: typeof EarningsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/trips/': {
      id: '/trips/'
      path: '/trips'
      fullPath: '/trips'
      preLoaderRoute: typeof TripsIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/drivers/driver': typeof DriversDriverRoute
  '/drivers/by-location': typeof DriversByLocationLazyRoute
  '/drivers/list': typeof DriversListLazyRoute
  '/misc/profile': typeof MiscProfileLazyRoute
  '/misc/settings': typeof MiscSettingsLazyRoute
  '/statics/earnings': typeof StaticsEarningsLazyRoute
  '/trips/$trip': typeof TripsTripLazyRoute
  '/earnings': typeof EarningsIndexLazyRoute
  '/trips': typeof TripsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/drivers/driver': typeof DriversDriverRoute
  '/drivers/by-location': typeof DriversByLocationLazyRoute
  '/drivers/list': typeof DriversListLazyRoute
  '/misc/profile': typeof MiscProfileLazyRoute
  '/misc/settings': typeof MiscSettingsLazyRoute
  '/statics/earnings': typeof StaticsEarningsLazyRoute
  '/trips/$trip': typeof TripsTripLazyRoute
  '/earnings': typeof EarningsIndexLazyRoute
  '/trips': typeof TripsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/drivers/driver': typeof DriversDriverRoute
  '/drivers/by-location': typeof DriversByLocationLazyRoute
  '/drivers/list': typeof DriversListLazyRoute
  '/misc/profile': typeof MiscProfileLazyRoute
  '/misc/settings': typeof MiscSettingsLazyRoute
  '/statics/earnings': typeof StaticsEarningsLazyRoute
  '/trips/$trip': typeof TripsTripLazyRoute
  '/earnings/': typeof EarningsIndexLazyRoute
  '/trips/': typeof TripsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/drivers/driver'
    | '/drivers/by-location'
    | '/drivers/list'
    | '/misc/profile'
    | '/misc/settings'
    | '/statics/earnings'
    | '/trips/$trip'
    | '/earnings'
    | '/trips'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/drivers/driver'
    | '/drivers/by-location'
    | '/drivers/list'
    | '/misc/profile'
    | '/misc/settings'
    | '/statics/earnings'
    | '/trips/$trip'
    | '/earnings'
    | '/trips'
  id:
    | '__root__'
    | '/'
    | '/drivers/driver'
    | '/drivers/by-location'
    | '/drivers/list'
    | '/misc/profile'
    | '/misc/settings'
    | '/statics/earnings'
    | '/trips/$trip'
    | '/earnings/'
    | '/trips/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DriversDriverRoute: typeof DriversDriverRoute
  DriversByLocationLazyRoute: typeof DriversByLocationLazyRoute
  DriversListLazyRoute: typeof DriversListLazyRoute
  MiscProfileLazyRoute: typeof MiscProfileLazyRoute
  MiscSettingsLazyRoute: typeof MiscSettingsLazyRoute
  StaticsEarningsLazyRoute: typeof StaticsEarningsLazyRoute
  TripsTripLazyRoute: typeof TripsTripLazyRoute
  EarningsIndexLazyRoute: typeof EarningsIndexLazyRoute
  TripsIndexLazyRoute: typeof TripsIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DriversDriverRoute: DriversDriverRoute,
  DriversByLocationLazyRoute: DriversByLocationLazyRoute,
  DriversListLazyRoute: DriversListLazyRoute,
  MiscProfileLazyRoute: MiscProfileLazyRoute,
  MiscSettingsLazyRoute: MiscSettingsLazyRoute,
  StaticsEarningsLazyRoute: StaticsEarningsLazyRoute,
  TripsTripLazyRoute: TripsTripLazyRoute,
  EarningsIndexLazyRoute: EarningsIndexLazyRoute,
  TripsIndexLazyRoute: TripsIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/drivers/driver",
        "/drivers/by-location",
        "/drivers/list",
        "/misc/profile",
        "/misc/settings",
        "/statics/earnings",
        "/trips/$trip",
        "/earnings/",
        "/trips/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/drivers/driver": {
      "filePath": "drivers/driver.tsx"
    },
    "/drivers/by-location": {
      "filePath": "drivers/by-location.lazy.tsx"
    },
    "/drivers/list": {
      "filePath": "drivers/list.lazy.tsx"
    },
    "/misc/profile": {
      "filePath": "misc/profile.lazy.tsx"
    },
    "/misc/settings": {
      "filePath": "misc/settings.lazy.tsx"
    },
    "/statics/earnings": {
      "filePath": "statics/earnings.lazy.tsx"
    },
    "/trips/$trip": {
      "filePath": "trips/$trip.lazy.tsx"
    },
    "/earnings/": {
      "filePath": "earnings/index.lazy.tsx"
    },
    "/trips/": {
      "filePath": "trips/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
